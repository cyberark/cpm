---
# tasks file for cpm registration

- name: Registration Block
  block:

    - name: Set up cpm registration configuration file
      win_shell: |
        try
        {
            $filePath = "{{ cpm_installationautomation_folder }}\\Registration\\CPMRegisterComponentConfig.xml"
            $xml = [xml](Get-Content $filePath)
            $step1 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultip']")
            $step1.Value = "{{ vault_ip }}"
            $step2 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultPort']")
            $step2.Value = "{{ vault_port }}"
            $step3 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultUser']")
            $step3.Value = "{{ vault_username }}"
            $step4 = $xml.SelectSingleNode("//Parameter[@Name = 'installDirectory']")
            $step4.Value = "{{ cpm_installation_path }}"
            $xml.Save($filePath)
            exit 0
        }
        catch
        {
            Write-Output "Error occured While updating registration configuration file"
            exit 1
        }
      when: dr_vault_ip is not defined

    - name: Set up cpm registration configuration file
      win_shell: |
        try
        {
            $filePath = "{{ cpm_installationautomation_folder }}\\Registration\\CPMRegisterComponentConfig.xml"
            $xml = [xml](Get-Content $filePath)
            $step1 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultip']")
            $step1.Value = "{{ vault_ip }},{{ dr_vault_ip }}"
            $step2 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultPort']")
            $step2.Value = "{{ vault_port }}"
            $step3 = $xml.SelectSingleNode("//Parameter[@Name = 'vaultUser']")
            $step3.Value = "{{ vault_username }}"
            $step4 = $xml.SelectSingleNode("//Parameter[@Name = 'installDirectory']")
            $step4.Value = "{{ cpm_installation_path }}"
            $xml.Save($filePath)
            exit 0
        }
        catch
        {
            Write-Output "Error occured While updating registration configuration file"
            exit 1
        }
      when: dr_vault_ip is defined

    - name: Execute cpm registration
      win_shell: |
        Set-Location "{{ cpm_registrationtool_folder }}"
        #$ErrorActionPreference = "SilentlyContinue"
        $Action = .\CPMRegisterCommponent.ps1 -pwd "{{ vault_password }}"
        $Action | Out-File -FilePath "{{ cpm_registration_log }}"
        $Result = Get-Content "{{ cpm_registration_log }}" -Raw | ConvertFrom-Json
        if ($Result.isSucceeded -ne 0) {
          exit 1
        } else {
          exit 0
        }

    - name: Fetch registration log from path
      fetch:
        src: '{{ cpm_registration_log }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/cpm/{{ inventory_hostname }}_registration.log'
        flat: yes

    - name: start cpm service & set to auto
      win_service:
        name: "{{ cpm_service_name }}"
        start_mode: auto
        state: started

    - name: start cpm scanner service & set to auto
      win_service:
        name: "{{ cpm_scanner_service_name }}"
        start_mode: auto
        state: started

    - name: check if cpm service is running
      win_service:
        name: "{{ cpm_service_name }}"
      register: cpm_service_info

    - name: check if cpm scanner service is running
      win_service:
        name: "{{ cpm_scanner_service_name }}"
      register: cpm_scanner_service_info

    - set_fact:
        cpm_registered: true
      when: cpm_service_info.state == "running" and cpm_scanner_service_info.state == "running"

  rescue:

    - name: Fetch registration log from path
      fetch:
        src: '{{ cpm_registration_log }}'
        dest: '{{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/cpm/{{ inventory_hostname }}_registration.log'
        flat: yes

    - fail:
        msg: 'ERROR: Registration failed. For more info check {{ lookup("config", "DEFAULT_LOG_PATH") | dirname }}/cpm/{{ inventory_hostname }}_registration.log'
